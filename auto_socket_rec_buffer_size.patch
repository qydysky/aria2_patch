diff --git a/src/Context.cc b/src/Context.cc
index d12775bb..311d6906 100644
--- a/src/Context.cc
+++ b/src/Context.cc
@@ -222,6 +222,7 @@ Context::Context(bool standalone, int argc, char** argv, const KeyVals& options)
     SocketCore::setProtocolFamily(AF_INET);
   }
   SocketCore::setIpDscp(op->getAsInt(PREF_DSCP));
+  util::updateSocketBufferSize(op.get());
   SocketCore::setSocketRecvBufferSize(
       op->getAsInt(PREF_SOCKET_RECV_BUFFER_SIZE));
   net::checkAddrconfig();
diff --git a/src/RpcMethodImpl.cc b/src/RpcMethodImpl.cc
index c2249202..3695c570 100644
--- a/src/RpcMethodImpl.cc
+++ b/src/RpcMethodImpl.cc
@@ -1151,6 +1151,7 @@ ChangeGlobalOptionRpcMethod::process(const RpcRequest& req, DownloadEngine* e)
   Option option;
   gatherChangeableGlobalOption(&option, optsParam);
   changeGlobalOption(option, e);
+  util::updateSocketBufferSize(e->getOption());
   return createOKResponse();
 }
 
diff --git a/src/util.cc b/src/util.cc
index 07502c0e..80ce73be 100644
--- a/src/util.cc
+++ b/src/util.cc
@@ -64,6 +64,7 @@
 #include <algorithm>
 #include <fstream>
 #include <iomanip>
+#include <string>
 
 #include "SimpleRandomizer.h"
 #include "File.h"
@@ -85,6 +86,8 @@
 #include "BufferedFile.h"
 #include "SocketCore.h"
 #include "Lock.h"
+#include "OptionParser.h"
+#include "OptionHandler.h"
 
 #include "MessageDigest.h"
 #include "message_digest_helper.h"
@@ -2337,6 +2340,42 @@ void executeHookByOptName(const RequestGroup* group, const Option* option,
   }
 }
 
+void updateSocketBufferSize(Option* option)
+{
+  int MAX_CONNECTION_PER_SERVER = option->getAsInt(PREF_MAX_CONNECTION_PER_SERVER);
+  int MAX_CONCURRENT_DOWNLOADS = option->getAsInt(PREF_MAX_CONCURRENT_DOWNLOADS);
+  if (MAX_CONNECTION_PER_SERVER == 0){MAX_CONNECTION_PER_SERVER = 1;}
+  if (MAX_CONCURRENT_DOWNLOADS == 0){MAX_CONCURRENT_DOWNLOADS = 1;}
+  int want = option->getAsInt(PREF_MAX_OVERALL_DOWNLOAD_LIMIT) / MAX_CONNECTION_PER_SERVER / MAX_CONCURRENT_DOWNLOADS;
+  want = SocketBufferSize(option, want);
+  if (want != option->getAsInt(PREF_SOCKET_RECV_BUFFER_SIZE)) {
+    A2_LOG_NOTICE(fmt("Adjust SOCKET_RECV_BUFFER_SIZE to %d", want));
+    option->put(PREF_SOCKET_RECV_BUFFER_SIZE,util::itos(want));
+  }
+}
+
+int SocketBufferSize(Option* option, int wantSize)
+{
+  const OptionHandler* handler = OptionParser::getInstance()->find(PREF_SOCKET_RECV_BUFFER_SIZE);
+  std::string strs = handler->createPossibleValuesString();
+
+  size_t pos = strs.find("-");
+  size_t size = strs.size();
+
+  std::string max;
+  std::string min;
+  if (pos != std::string::npos) {
+    max = strs.substr(pos+1,size);
+    min = strs.substr(0,pos);
+  } else {
+    return -1;
+  }
+
+  if (wantSize > std::stoi(max) || wantSize == 0) {return std::stoi(max);}
+  if (wantSize < std::stoi(min)) {return std::stoi(min);}
+  return wantSize;
+}
+
 std::string createSafePath(const std::string& dir, const std::string& filename)
 {
   return util::applyDir(dir,
diff --git a/src/util.h b/src/util.h
index bb7d8d3e..9b6a28c2 100644
--- a/src/util.h
+++ b/src/util.h
@@ -768,6 +768,9 @@ bool inSameCidrBlock(const std::string& ip1, const std::string& ip2,
 void executeHookByOptName(const std::shared_ptr<RequestGroup>& group,
                           const Option* option, PrefPtr pref);
 
+void updateSocketBufferSize(Option* option);
+int SocketBufferSize(Option* option, int wantSize);
+
 // No throw
 void executeHookByOptName(const RequestGroup* group, const Option* option,
                           PrefPtr pref);
